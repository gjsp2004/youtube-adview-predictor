import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from tensorflow import keras
from tensorflow.keras import layers

# Step 1: Import the dataset
url = 'https://drive.google.com/uc?id=1Dv-HF10AUUA03AO_cQvar462eXawk0iQ'
data = pd.read_csv(url)

# Step 2: Visualize the dataset
plt.figure(figsize=(12, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix')
plt.show()
data.hist(figsize=(12, 10))
plt.show()

# Step 3: Clean the dataset
data = data.dropna()

# Step 4: Transform attributes
data['duration'] = pd.to_timedelta(data['duration'])
data['duration'] = data['duration'].dt.total_seconds()

# Step 5: Normalize data and split into training, validation, and test sets
normalized_data = (data - data.mean()) / data.std()
X = normalized_data.drop(['vidid', 'adview', 'published'], axis=1)
y = normalized_data['adview']
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=0)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=0)

# Step 6: Handle categorical data and use linear regression
if 'category' in data.columns:
    categorical_cols = ['category']
    preprocessor = ColumnTransformer(
        transformers=[('cat', OneHotEncoder(), categorical_cols)],
        remainder='passthrough'
    )

    X_train_encoded = preprocessor.fit_transform(X_train)
    X_val_encoded = preprocessor.transform(X_val)

    lr = LinearRegression()
    lr.fit(X_train_encoded, y_train)
    lr_pred = lr.predict(X_val_encoded)
    lr_error = mean_squared_error(y_val, lr_pred)
    print("Linear Regression Error:", lr_error)
else:
    print("The 'category' column is not present in the dataset.")

# Step 7: Use Support Vector Regressor
svr = SVR()
svr.fit(X_train, y_train)
svr_pred = svr.predict(X_val)
svr_error = mean_squared_error(y_val, svr_pred)
print("Support Vector Regressor Error:", svr_error)

# Step 8: Use Decision Tree Regressor and Random Forest Regressor
dt = DecisionTreeRegressor()
rf = RandomForestRegressor()

dt.fit(X_train, y_train)
rf.fit(X_train, y_train)

dt_pred = dt.predict(X_val)
rf_pred = rf.predict(X_val)

dt_error = mean_squared_error(y_val, dt_pred)
rf_error = mean_squared_error(y_val, rf_pred)

print("Decision Tree Regressor Error:", dt_error)
print("Random Forest Regressor Error:", rf_error)

# Step 9: Build an Artificial Neural Network (ANN)
model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    layers.Dense(64, activation='relu'),
    layers.Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(X_train, y_train, epochs=10, batch_size=16, validation_data=(X_val, y_val))

# Step 10: Save the model and predict on the test set
model.save('youtube_adview_prediction_model.h5')
test_predictions = model.predict(X_test)
print("Test Predictions:", test_predictions)
